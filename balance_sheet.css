html {
    box-sizing: border-box;
}

body {
    font-family: sans-serif;
    color: #0a0a23;
}

/* use CSS to make elements with this class completely hidden from the visual page, 
but still be announced by screen readers.
The span[class~="sr-only"] selector will select any span element 
whose class includes sr-only*/
/*Rather than having to constantly double-check you are not overwriting your 
earlier properties, you can use the !important keyword to ensure these properties 
are always applied, regardless of order or specificity.*/
span[class~="sr-only"] {
    border: 0 !important;
    clip: rect(1px, 1px,1px,1px) !important; /*to define the visible portions of an element*/
    clip-path: inset(50%) !important; /*forming the clip-path into a rectangle within the element*/
    width: 1px !important;
    height: 1px !important;
    /*To prevent the text content from overflowing*/
    overflow: hidden !important;
    white-space: nowrap !important;
    /*take these hidden elements out of the document flow
    ensure that not only are they no longer visible, 
    but they are not even within the page view*/
    position: absolute !important;
    padding: 0 !important;
    margin: -1px !important;
}


h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem;
}

h1 .flex { /* Target your flex container */
    /* enable the flexbox layout */
    display: flex;
    /* display the nested elements from bottom to top */
    flex-direction: column-reverse;
    /* create some space between the elements */
    gap: 1rem;
}

/* :first-of-type pseudo-selector is used to target 
the first element that matches the selector */
h1 .flex span:first-of-type { /*target the first span element in your .flex container*/
    /*Remember that your span elements are reversed, visually, 
    so this will appear to be the second element on the page*/
    /* make it look like a sub-heading */
    font-size: 0.7em;
}

h1 .flex span:last-of-type {
    font-size: 1.2em;
}

section {
    max-width: 40rem;
    margin: 0 auto;
    border: 2px solid #d0d0d5;
}

#years {
    display: flex; /*enable flexbox*/
    /*Justify the content to the end of the flex direction, and make the element sticky*/
    justify-content: flex-end;
    position: sticky; 
    /*Fix it to the top of its container*/
    top: 0;
    color: #fff;
    background-color: #0a0a23;
    margin: 0 -2px;
    /* calc() function is a CSS function that allows you to calculate a value 
    based on other values*/
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
    /*position sticky moved the element into its own stack*/
    position: sticky;
    /*To ensure your #years element does not get hidden by different stacks*/
    z-index: 999;
}

/*Style the text within your #years element*/
#years span[class] { /*target any span element that has a class attribute set, 
    regardless of the attribute's value*/
    font-weight: bold;
    width: 4.5rem;
    text-align: right;

}

/*You wrapped your tables in a container*/
.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem;
}


/*Before you start diving in to the table itself, 
your span elements are currently bolded
The :not() pseudo-selector is used to target all elements 
that do not match the selector - in this case, any of your span 
elements that do not have the sr-only class. 
This ensures that your earlier rules for the span[class~="sr-only"] 
selector are not overwritten*/
/*span:not(.sr-only) {*/

    /*Now that you have added the !important keyword, 
you can remove the :not(.sr-only) from your span selector.*/

/*Your span elements now all have more specific styling, which means you can 
remove your span rule.
span {    
    font-weight: normal;
}
*/

table {
    /*will allow cell borders to collapse into a single border, 
    instead of a border around each cell*/
    border-collapse: collapse;
    /*to hide the borders themselves*/
    border: 0;
    /*Ensure your table fills its container with a width property set to 100%*/
    width: 100%;
    /*then position it relatively and give it a top margin of 3rem*/
    position: relative;
    margin-top: 3rem;
}


/*to style your caption elements to look more like headers*/
table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    /*shift them -2.25rem from the top and 0.5rem from the left*/
    top: -2.25rem;
    left: 0.5rem;
}

/*td elements within your table body.
a width to fill the viewport, with a minimum and maximum of 4rem. 
This approach ensures that the width is fixed, whereas setting width 
specifically would allow the elements to shrink to the container.*/
tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem;
}


/*target the th elements within your table body, and give them 
a width of the entire container, less 12rem*/
tbody th {
    width: calc(100% - 12rem);
    
}


/*The [attribute="value"] selector targets any element that 
has an attribute with a specific value*/
/*selector to target specifically your tr elements with the total class*/
tr[class="total"] {
    border-bottom: 4px double #0a0a23;
    font-weight: bold;
}

/*target the th elements within your table rows where the class is total*/
tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem;
}


/*The key difference between tr[class="total"] and tr.total is that 
the first will select tr elements where the only class is total. 
The second will select tr elements where the class includes total.

In your case, tr.total will work. You can use this selector to target all 
td elements within your .total rows. Align the text to the right, 
and give them a padding of 0 0.25rem.*/
tr.total td {
    text-align: right;
    padding: 0 0.25rem;
}

/*The :nth-of-type() pseudo-selector is used to target specific elements based on 
their order among siblings of the same type. Use this pseudo-selector to target 
the third td element within your total table rows. Give it a right padding of 0.5rem*/
tr.total td:nth-of-type(3) {
    padding-right: 0.5rem;
}


/*hover effect that changes the background to #99c9ff*/
tr.total:hover {
    background-color: #99c9ff;
}


/*Select your td elements with the class value of current, and make the font italic.*/
td.current {
    font-style: italic;
}

tr[class="data"] {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}


tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem;
}


tr.data th .description {
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem;
}

tr.data td {
    /*Vertically align the text to the top, horizontally align the text to the right*/
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
}

tr.data td:last-of-type {
    padding-right: 0.5rem;
}